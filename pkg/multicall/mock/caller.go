// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/status-im/go-wallet-sdk/pkg/multicall (interfaces: Caller)
//
// Generated by this command:
//
//	mockgen -destination=mock/caller.go . Caller
//

// Package mock_multicall is a generated GoMock package.
package mock_multicall

import (
	big "math/big"
	reflect "reflect"

	bind "github.com/ethereum/go-ethereum/accounts/abi/bind"
	multicall3 "github.com/status-im/go-wallet-sdk/pkg/contracts/multicall3"
	gomock "go.uber.org/mock/gomock"
)

// MockCaller is a mock of Caller interface.
type MockCaller struct {
	ctrl     *gomock.Controller
	recorder *MockCallerMockRecorder
	isgomock struct{}
}

// MockCallerMockRecorder is the mock recorder for MockCaller.
type MockCallerMockRecorder struct {
	mock *MockCaller
}

// NewMockCaller creates a new mock instance.
func NewMockCaller(ctrl *gomock.Controller) *MockCaller {
	mock := &MockCaller{ctrl: ctrl}
	mock.recorder = &MockCallerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCaller) EXPECT() *MockCallerMockRecorder {
	return m.recorder
}

// ViewTryAggregate mocks base method.
func (m *MockCaller) ViewTryAggregate(opts *bind.CallOpts, requireSuccess bool, calls []multicall3.IMulticall3Call) ([]multicall3.IMulticall3Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewTryAggregate", opts, requireSuccess, calls)
	ret0, _ := ret[0].([]multicall3.IMulticall3Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewTryAggregate indicates an expected call of ViewTryAggregate.
func (mr *MockCallerMockRecorder) ViewTryAggregate(opts, requireSuccess, calls any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewTryAggregate", reflect.TypeOf((*MockCaller)(nil).ViewTryAggregate), opts, requireSuccess, calls)
}

// ViewTryBlockAndAggregate mocks base method.
func (m *MockCaller) ViewTryBlockAndAggregate(opts *bind.CallOpts, requireSuccess bool, calls []multicall3.IMulticall3Call) (*big.Int, [32]byte, []multicall3.IMulticall3Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewTryBlockAndAggregate", opts, requireSuccess, calls)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].([32]byte)
	ret2, _ := ret[2].([]multicall3.IMulticall3Result)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// ViewTryBlockAndAggregate indicates an expected call of ViewTryBlockAndAggregate.
func (mr *MockCallerMockRecorder) ViewTryBlockAndAggregate(opts, requireSuccess, calls any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewTryBlockAndAggregate", reflect.TypeOf((*MockCaller)(nil).ViewTryBlockAndAggregate), opts, requireSuccess, calls)
}
