// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/status-im/go-wallet-sdk/pkg/gas (interfaces: EthClient)
//
// Generated by this command:
//
//	mockgen -destination=mock/ethclient.go . EthClient
//

// Package mock_gas is a generated GoMock package.
package mock_gas

import (
	context "context"
	big "math/big"
	reflect "reflect"

	ethereum "github.com/ethereum/go-ethereum"
	ethclient "github.com/status-im/go-wallet-sdk/pkg/ethclient"
	gomock "go.uber.org/mock/gomock"
)

// MockEthClient is a mock of EthClient interface.
type MockEthClient struct {
	ctrl     *gomock.Controller
	recorder *MockEthClientMockRecorder
	isgomock struct{}
}

// MockEthClientMockRecorder is the mock recorder for MockEthClient.
type MockEthClientMockRecorder struct {
	mock *MockEthClient
}

// NewMockEthClient creates a new mock instance.
func NewMockEthClient(ctrl *gomock.Controller) *MockEthClient {
	mock := &MockEthClient{ctrl: ctrl}
	mock.recorder = &MockEthClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEthClient) EXPECT() *MockEthClientMockRecorder {
	return m.recorder
}

// EstimateGas mocks base method.
func (m *MockEthClient) EstimateGas(ctx context.Context, msg ethereum.CallMsg) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EstimateGas", ctx, msg)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EstimateGas indicates an expected call of EstimateGas.
func (mr *MockEthClientMockRecorder) EstimateGas(ctx, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EstimateGas", reflect.TypeOf((*MockEthClient)(nil).EstimateGas), ctx, msg)
}

// FeeHistory mocks base method.
func (m *MockEthClient) FeeHistory(ctx context.Context, blockCount uint64, lastBlock *big.Int, rewardPercentiles []float64) (*ethereum.FeeHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FeeHistory", ctx, blockCount, lastBlock, rewardPercentiles)
	ret0, _ := ret[0].(*ethereum.FeeHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FeeHistory indicates an expected call of FeeHistory.
func (mr *MockEthClientMockRecorder) FeeHistory(ctx, blockCount, lastBlock, rewardPercentiles any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FeeHistory", reflect.TypeOf((*MockEthClient)(nil).FeeHistory), ctx, blockCount, lastBlock, rewardPercentiles)
}

// LineaEstimateGas mocks base method.
func (m *MockEthClient) LineaEstimateGas(ctx context.Context, msg ethereum.CallMsg) (*ethclient.LineaEstimateGasResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LineaEstimateGas", ctx, msg)
	ret0, _ := ret[0].(*ethclient.LineaEstimateGasResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LineaEstimateGas indicates an expected call of LineaEstimateGas.
func (mr *MockEthClientMockRecorder) LineaEstimateGas(ctx, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LineaEstimateGas", reflect.TypeOf((*MockEthClient)(nil).LineaEstimateGas), ctx, msg)
}
