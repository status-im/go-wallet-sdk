// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/status-im/go-wallet-sdk/pkg/tokens/autofetcher (interfaces: AutoFetcher,ContentStore)
//
// Generated by this command:
//
//	mockgen -destination=mock/autofetcher.go . AutoFetcher,ContentStore
//

// Package mock_autofetcher is a generated GoMock package.
package mock_autofetcher

import (
	context "context"
	reflect "reflect"

	autofetcher "github.com/status-im/go-wallet-sdk/pkg/tokens/autofetcher"
	gomock "go.uber.org/mock/gomock"
)

// MockAutoFetcher is a mock of AutoFetcher interface.
type MockAutoFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockAutoFetcherMockRecorder
	isgomock struct{}
}

// MockAutoFetcherMockRecorder is the mock recorder for MockAutoFetcher.
type MockAutoFetcherMockRecorder struct {
	mock *MockAutoFetcher
}

// NewMockAutoFetcher creates a new mock instance.
func NewMockAutoFetcher(ctrl *gomock.Controller) *MockAutoFetcher {
	mock := &MockAutoFetcher{ctrl: ctrl}
	mock.recorder = &MockAutoFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAutoFetcher) EXPECT() *MockAutoFetcherMockRecorder {
	return m.recorder
}

// Start mocks base method.
func (m *MockAutoFetcher) Start(ctx context.Context) chan error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", ctx)
	ret0, _ := ret[0].(chan error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockAutoFetcherMockRecorder) Start(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockAutoFetcher)(nil).Start), ctx)
}

// Stop mocks base method.
func (m *MockAutoFetcher) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockAutoFetcherMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockAutoFetcher)(nil).Stop))
}

// MockContentStore is a mock of ContentStore interface.
type MockContentStore struct {
	ctrl     *gomock.Controller
	recorder *MockContentStoreMockRecorder
	isgomock struct{}
}

// MockContentStoreMockRecorder is the mock recorder for MockContentStore.
type MockContentStoreMockRecorder struct {
	mock *MockContentStore
}

// NewMockContentStore creates a new mock instance.
func NewMockContentStore(ctrl *gomock.Controller) *MockContentStore {
	mock := &MockContentStore{ctrl: ctrl}
	mock.recorder = &MockContentStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContentStore) EXPECT() *MockContentStoreMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockContentStore) Get(id string) (autofetcher.Content, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(autofetcher.Content)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockContentStoreMockRecorder) Get(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockContentStore)(nil).Get), id)
}

// GetAll mocks base method.
func (m *MockContentStore) GetAll() (map[string]autofetcher.Content, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].(map[string]autofetcher.Content)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockContentStoreMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockContentStore)(nil).GetAll))
}

// GetEtag mocks base method.
func (m *MockContentStore) GetEtag(id string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEtag", id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEtag indicates an expected call of GetEtag.
func (mr *MockContentStoreMockRecorder) GetEtag(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEtag", reflect.TypeOf((*MockContentStore)(nil).GetEtag), id)
}

// Set mocks base method.
func (m *MockContentStore) Set(id string, content autofetcher.Content) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", id, content)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockContentStoreMockRecorder) Set(id, content any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockContentStore)(nil).Set), id, content)
}
