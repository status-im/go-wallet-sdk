// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/status-im/go-wallet-sdk/pkg/tokens/parsers (interfaces: TokenListParser,ListOfTokenListsParser)
//
// Generated by this command:
//
//	mockgen -destination=mock/parser.go . TokenListParser,ListOfTokenListsParser
//

// Package mock_parsers is a generated GoMock package.
package mock_parsers

import (
	reflect "reflect"

	types "github.com/status-im/go-wallet-sdk/pkg/tokens/types"
	gomock "go.uber.org/mock/gomock"
)

// MockTokenListParser is a mock of TokenListParser interface.
type MockTokenListParser struct {
	ctrl     *gomock.Controller
	recorder *MockTokenListParserMockRecorder
	isgomock struct{}
}

// MockTokenListParserMockRecorder is the mock recorder for MockTokenListParser.
type MockTokenListParserMockRecorder struct {
	mock *MockTokenListParser
}

// NewMockTokenListParser creates a new mock instance.
func NewMockTokenListParser(ctrl *gomock.Controller) *MockTokenListParser {
	mock := &MockTokenListParser{ctrl: ctrl}
	mock.recorder = &MockTokenListParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenListParser) EXPECT() *MockTokenListParserMockRecorder {
	return m.recorder
}

// Parse mocks base method.
func (m *MockTokenListParser) Parse(raw []byte, supportedChains []uint64) (*types.TokenList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parse", raw, supportedChains)
	ret0, _ := ret[0].(*types.TokenList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Parse indicates an expected call of Parse.
func (mr *MockTokenListParserMockRecorder) Parse(raw, supportedChains any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parse", reflect.TypeOf((*MockTokenListParser)(nil).Parse), raw, supportedChains)
}

// MockListOfTokenListsParser is a mock of ListOfTokenListsParser interface.
type MockListOfTokenListsParser struct {
	ctrl     *gomock.Controller
	recorder *MockListOfTokenListsParserMockRecorder
	isgomock struct{}
}

// MockListOfTokenListsParserMockRecorder is the mock recorder for MockListOfTokenListsParser.
type MockListOfTokenListsParserMockRecorder struct {
	mock *MockListOfTokenListsParser
}

// NewMockListOfTokenListsParser creates a new mock instance.
func NewMockListOfTokenListsParser(ctrl *gomock.Controller) *MockListOfTokenListsParser {
	mock := &MockListOfTokenListsParser{ctrl: ctrl}
	mock.recorder = &MockListOfTokenListsParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockListOfTokenListsParser) EXPECT() *MockListOfTokenListsParserMockRecorder {
	return m.recorder
}

// Parse mocks base method.
func (m *MockListOfTokenListsParser) Parse(raw []byte) (*types.ListOfTokenLists, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parse", raw)
	ret0, _ := ret[0].(*types.ListOfTokenLists)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Parse indicates an expected call of Parse.
func (mr *MockListOfTokenListsParserMockRecorder) Parse(raw any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parse", reflect.TypeOf((*MockListOfTokenListsParser)(nil).Parse), raw)
}
