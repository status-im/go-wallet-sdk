// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/status-im/go-wallet-sdk/pkg/tokens/fetcher (interfaces: Fetcher)
//
// Generated by this command:
//
//	mockgen -destination=mock/fetcher.go . Fetcher
//

// Package mock_fetcher is a generated GoMock package.
package mock_fetcher

import (
	context "context"
	reflect "reflect"

	fetcher "github.com/status-im/go-wallet-sdk/pkg/tokens/fetcher"
	gomock "go.uber.org/mock/gomock"
)

// MockFetcher is a mock of Fetcher interface.
type MockFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockFetcherMockRecorder
	isgomock struct{}
}

// MockFetcherMockRecorder is the mock recorder for MockFetcher.
type MockFetcherMockRecorder struct {
	mock *MockFetcher
}

// NewMockFetcher creates a new mock instance.
func NewMockFetcher(ctrl *gomock.Controller) *MockFetcher {
	mock := &MockFetcher{ctrl: ctrl}
	mock.recorder = &MockFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFetcher) EXPECT() *MockFetcherMockRecorder {
	return m.recorder
}

// Fetch mocks base method.
func (m *MockFetcher) Fetch(ctx context.Context, details fetcher.FetchDetails) (fetcher.FetchedData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", ctx, details)
	ret0, _ := ret[0].(fetcher.FetchedData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch.
func (mr *MockFetcherMockRecorder) Fetch(ctx, details any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockFetcher)(nil).Fetch), ctx, details)
}

// FetchConcurrent mocks base method.
func (m *MockFetcher) FetchConcurrent(ctx context.Context, details []fetcher.FetchDetails) ([]fetcher.FetchedData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchConcurrent", ctx, details)
	ret0, _ := ret[0].([]fetcher.FetchedData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchConcurrent indicates an expected call of FetchConcurrent.
func (mr *MockFetcherMockRecorder) FetchConcurrent(ctx, details any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchConcurrent", reflect.TypeOf((*MockFetcher)(nil).FetchConcurrent), ctx, details)
}
