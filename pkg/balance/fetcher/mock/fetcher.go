// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/status-im/go-wallet-sdk/pkg/balance/fetcher (interfaces: RPCClient,BatchCaller)
//
// Generated by this command:
//
//	mockgen -destination=mock/fetcher.go . RPCClient,BatchCaller
//

// Package mock_fetcher is a generated GoMock package.
package mock_fetcher

import (
	context "context"
	big "math/big"
	reflect "reflect"

	ethereum "github.com/ethereum/go-ethereum"
	common "github.com/ethereum/go-ethereum/common"
	rpc "github.com/ethereum/go-ethereum/rpc"
	gomock "go.uber.org/mock/gomock"
)

// MockRPCClient is a mock of RPCClient interface.
type MockRPCClient struct {
	ctrl     *gomock.Controller
	recorder *MockRPCClientMockRecorder
	isgomock struct{}
}

// MockRPCClientMockRecorder is the mock recorder for MockRPCClient.
type MockRPCClientMockRecorder struct {
	mock *MockRPCClient
}

// NewMockRPCClient creates a new mock instance.
func NewMockRPCClient(ctrl *gomock.Controller) *MockRPCClient {
	mock := &MockRPCClient{ctrl: ctrl}
	mock.recorder = &MockRPCClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRPCClient) EXPECT() *MockRPCClientMockRecorder {
	return m.recorder
}

// BatchCallContext mocks base method.
func (m *MockRPCClient) BatchCallContext(ctx context.Context, b []rpc.BatchElem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchCallContext", ctx, b)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchCallContext indicates an expected call of BatchCallContext.
func (mr *MockRPCClientMockRecorder) BatchCallContext(ctx, b any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchCallContext", reflect.TypeOf((*MockRPCClient)(nil).BatchCallContext), ctx, b)
}

// CallContract mocks base method.
func (m *MockRPCClient) CallContract(ctx context.Context, call ethereum.CallMsg, blockNumber *big.Int) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallContract", ctx, call, blockNumber)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CallContract indicates an expected call of CallContract.
func (mr *MockRPCClientMockRecorder) CallContract(ctx, call, blockNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallContract", reflect.TypeOf((*MockRPCClient)(nil).CallContract), ctx, call, blockNumber)
}

// ChainID mocks base method.
func (m *MockRPCClient) ChainID(ctx context.Context) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChainID", ctx)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChainID indicates an expected call of ChainID.
func (mr *MockRPCClientMockRecorder) ChainID(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChainID", reflect.TypeOf((*MockRPCClient)(nil).ChainID), ctx)
}

// CodeAt mocks base method.
func (m *MockRPCClient) CodeAt(ctx context.Context, contract common.Address, blockNumber *big.Int) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CodeAt", ctx, contract, blockNumber)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CodeAt indicates an expected call of CodeAt.
func (mr *MockRPCClientMockRecorder) CodeAt(ctx, contract, blockNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CodeAt", reflect.TypeOf((*MockRPCClient)(nil).CodeAt), ctx, contract, blockNumber)
}

// MockBatchCaller is a mock of BatchCaller interface.
type MockBatchCaller struct {
	ctrl     *gomock.Controller
	recorder *MockBatchCallerMockRecorder
	isgomock struct{}
}

// MockBatchCallerMockRecorder is the mock recorder for MockBatchCaller.
type MockBatchCallerMockRecorder struct {
	mock *MockBatchCaller
}

// NewMockBatchCaller creates a new mock instance.
func NewMockBatchCaller(ctrl *gomock.Controller) *MockBatchCaller {
	mock := &MockBatchCaller{ctrl: ctrl}
	mock.recorder = &MockBatchCallerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBatchCaller) EXPECT() *MockBatchCallerMockRecorder {
	return m.recorder
}

// BatchCallContext mocks base method.
func (m *MockBatchCaller) BatchCallContext(ctx context.Context, b []rpc.BatchElem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchCallContext", ctx, b)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchCallContext indicates an expected call of BatchCallContext.
func (mr *MockBatchCallerMockRecorder) BatchCallContext(ctx, b any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchCallContext", reflect.TypeOf((*MockBatchCaller)(nil).BatchCallContext), ctx, b)
}
